*****************
집합과 대수 공간
*****************
이 단원에서는 기초적인 집합과 대수 구조에 관해 다룬다. 집합에 대한 소개와 여러 대수 구조들; 
군, 환, 체 등에 대한 개략적인 소개를 한다. 해당 단원이 관련 개념들에 대해, 
많은 내용을 포함하고 있지는 않다 전 단원과 같이 이 단원은 다른 수학 단원을 보조하기 위한 역할이다. 
대수 구조들에 관한 자세한 내용은 차후 대수학 단원에서 다루고, 
여기서 예시로 다루는 실수, 정수 등의 내용도 우리가 일반적으로 알고 있는 성질에 의존할 것이다. 
해당 내용의 엄밀한 구축은 해석학 입문에서 다루도록 하자.

기초 집합론(Introduction to Set Theory)
=======================================================

집합이라는 대상은 수학적 공리로 정의하기에는 상당히 에매한 대상이다. 
무엇보다 집합은 다른 수학적 대상을 정의하는 데 가장 기초적으로 사용되는 만큼 다른 정의에 의존할 수도 없다.

용어에 대해 자연어적인 정의를 우선하고 가도록 하자

소박한 집합론 (Naive Set Theory)
----------------------------------------

소박한 집합론은 이름 그대로 소박한(Naive)한 집합론이다. 
소박하다라는 의미는 형식적(formal)한 정의가 아닌 비형식적인 자연언어로 정의되어 있다라는 것을 의미한다. 
이는 처음으로 정의된 집합론으로 Georg Cantor가 무한 집합에 관해 연구할 때 도입하였다. 
이러한 소박한 집합론에서 집합의 용어들은 다음과 같이 자연언어로 정의된다.

1. **집합(Set)** 은 잘 정의된 객체들의 모음이다(Well-defined collection of objects).
2. 집합이 포함하는 객체는 **원소(elements)** 라 부른다.
3. :math:`X` 가 집합이고 :math:`a` 가 집합 :math:`X` 의 원소라면, :math:`X` 가 :math:`a` 를 포함한다, :math:`a` 가 :math:`X` 에 속한다라 한다.  :math:`z \in X` 로 표기한다.
4. :math:`X` 가 집합이고 :math:`a` 가 집합 :math:`X` 의 원소가 아니라면, :math:`z \not\in X` 로 표기한다.
5. 두 집합 :math:`X` , :math:`Y` 에 대해, :math:`X` 의 모든 원소들이 :math:`Y` 의 원소이면, :math:`X` 는 :math:`Y` 의 부분 집합(Subset)이라 부르며, :math:`X \subset Y` 로 표기한다.
6. 집합의 원소들이 집합을 결정한다. 즉, 동일한 원소를 가지면서 다른 두 집합은 존재하지 않는다. 
7. 임의의 성질에 대해, 이를 만족시키는 원소만을 원소로 가지는 집합이 존재한다.
 
1-5는 집합론의 용어를 정의하고, 6-7은 집합론의 공리이다. 
소박한 집합론은 2개의 공리를 포함한다. 이 둘은 각각 외연 공리와 Unrestriced Comprehension 공리라 불린다. 
이 둘을 다시 쓰면 다음과 같다.

.. proof:axiom:: 외연 Extensionality

    .. math::

        \forall x \forall y [ \forall z (z \in x \leftrightarrow z \in y) \rightarrow x =y]  

.. proof:axiomschema:: Unrestricted Comprehension

    집합론의 언어로 된 술어 :math:`P(x, w_1, \dots, w_n)` 에 대해, 

    .. math::

        \forall w_1, \dots, w_n \exists z [z \in x \leftrightarrow P(z, w_1, \dots, w_n)]              


일반적으로 부르는 집합은 

존재 공리



러셀의 역설과 ZFC 공리계
------------------------------

러셀의 역설 (Russell's Paradox)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

집합뿐만 아니라 술어로 가보자, 

ZFC 공리계 (ZFC Axioms)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ZFC 공리는 체르멜로( **Z** ermelo)와 프렝켈( **F** raenkel)이 만든 공리계와 선택 공리(Axiom of **C** hoice)를 추가한 공리계를 의미한다.

.. proof:axiom:: 확장 Extensionality

    .. math::

    \forall x \forall y [ \forall z (z \in x \leftrightarrow z \in y) \rightarrow x =y]     



정칙성 (Regularity)

Restricted comprehension

짝 (Pairing)

합 (Union)

치환 (Schema of Replacement)

무한 (Infinity)

벽 집합 (Power Set)

선택 (Choice)



선택 공리는 ZF 공리계와 함께 동치인 명제들을 찾을 수 있다. 

* 초른의 보조정리(Zorn's lemma)
* 정렬 가능성(Well-Ordering Principle)
* 티호노프의 정리

이 외에도 동치인 정리들이 몇 있는데, 해당 개념이 필요할 때 설명하도록 하자.

정렬(Order)
------------------------------

자연수(Natural Number)
------------------------------
집합의 크기(Cardinality)
------------------------------

가산 집합과 불가산 집합(Countable and Uncountable Set)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Schröder-Bernstein theorem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

두 무한 집합의 크기 비교에 관한 정리



대수구조(Algebraic Structure)
=======================================================

대수 구조(Algebraic Structure)
-------------------------------------
대수학에서 다루는 대상은 기본적으로 대수 구조와 변환이다. 여러 특정한 구조와 변환이 앞으로 등장하고, 각각 다양한 성질이 있지만 가장 먼저 해야할 일은 이 두 가지 대상이 무엇인지 알아보는 것이다. 대수 구조는 다음과 같이 정의된다.


.. proof:definition:: 대수 구조 Algebraic Structure

    공집합이 아닌 집합 :math:`S` 와 그 위에 정의된 연산 :math:`\cdot` 에 대해 
    :math:`(S,\cdot)` 을 **대수 구조** 라 한다. 
            

집합 :math:`S` 에 대해 

.. math::
    
    \cdot : S \times S \rightarrow S

인 대응 관계를 **이항 연산(Binary operation)** 이라 부른다. 
연산의 정의는 몇개의 원소를 포함하느냐에 따라 달라진다. 
:math:`n` 개의 원소를 다른 원소에 대응 시키는 관계는 :math:`n` 항 연산이라 부른다.


이러한 대수 구조는 집합과 그 위에 정의된 연산 각각에 따라 성질이 달라진다. 따라서 이를 표기에 반영해 다음과 같이 표기한다.

.. math::

    (S,\cdot)  
    

:math:`(S,+),(S, \times), (F,\times)` 는 모두 각각 다른 대수 구조이다. 

실수 전체 집합은 :math:`\mathbb{R}` 로 표기하는 데, 우린 이 집합의 원소(실수)의 연산(덧셈, 곱셈, 등호 그리고 부등호)을 익숙하게 하고 있다. 
이 :math:`\mathbb{R}` 또한, 서술한 연산과 함께 대수 구조를 형성한다.  

먼저, 각각의  연산자에 대해서 다음과 같이 표기 할 수 있다.

.. math::

    (\mathbb{R},+),(\mathbb{R},\times),(\mathbb{R},<)  
    
여러가지 연산이 정의된 경우 한꺼번에 표기 하기도 한다.

.. math::

    (\mathbb{R},+,\times,<)  

이처럼 대수 구조는 같은 집합이라 하더라도 연산자를 어떻게 정의하는 가에 따라 여러가지 구조를 만들 수 있다. 
대수 구조의 종류로 대표적으로 다음이 존재한다.

 1. 집합 (Set)
 2. 모노이드 (Monoid)
 3. 군 (Group)
 4. 환 (Ring)
 5. 체 (Field)


==========  =====  ==============  ========
연산자 수    0       1              2
==========  =====  ==============  ========
대수 구조    집합    모노이드, 군    환,체 
==========  =====  ==============  ========


이러한 구조 하나하나에 대해서 수학 분야 1개가 필요할 정도로(eg. 군론) 이들이 가지는 수학적 유용성과 가치는 매우 높다. 
하지만 이 단원에서는 군, 환, 체의 개념과 기초적인 내용만 다루도록 하자. 
이러한 분야에 대해 더 공부를 하고 싶다면 차후 현대 대수학 등의 강의를 들어 보는 것을 추천한다. 

군(Group)
------------------------------

.. proof:definition:: 군 Group

        
    대수 구조 :math:`(S,\cdot)` 가 다음 4가지 성질(군 공리계)을 만족할 때, 
    이를 **군** (Group)이라 한다.

    1. 연산에 대해 *닫힘* (Closure)
        .. math::

             \forall a,b \in S  \\

              a \cdot b, b \cdot a \in S    

    2. 항등원의 존재 (Existence of neutral/identity element)
        .. math::

             \exists  1 \in S  \ and \ \forall \ s \in S  \\

              1 \cdot s = s \cdot 1 = s    

    3. 역원의 존재 (Existence of inverse element)
        .. math::

             \forall s \in S, \  \exists s' \in S  \\

             s \cdot s' = s' \cdot s = 1  \\

             s' = s^{-1} \  \ \textrm{inverse}   

    4. 결합 법칙(Assosiative law)
        .. math::

            \forall s_1,s_2,s_3 \in S \\

            s_1 \cdot (s_2 \cdot s_3) = (s_1 \cdot s_2)\cdot s_3   

    5. 교환 법칙(Commutative law)
        .. math::

            \forall s_1,s_2 \in S  \\

             s_1 \cdot s_2 = s_2 \cdot s_1  

    5.를 추가로 만족하는 구조를 **가환군** 다른 말로 **아벨군** (Abelian Group) 이라 부른다 [#Abel]_ .
            

.. note::
    
    1,2,4 만을 만족 할 때, 이를 모노이드라 부른다.



초등학교에서 꾸준히 써왔던 사칙연산 :math:`(+,-,\times, ÷ )` 을 생각해보자, 실수는 덧셈 :math:`+` 과 곱셈 :math:`\times` 에 대해서 아벨 군을 이룬다. 
:math:`-` 와 :math:`÷` 는 :math:`+` ,:math:`\times` 에서 원소의 역원을 연산하는 것일 뿐, 
별도로 정의된 연산자가 아니다 [#연산]_ .

 
우리에게 익숙한 수 집합( :math:`\mathbb{N},\mathbb{Z},\mathbb{Q},\mathbb{R},\mathbb{C}` ) 중 
:math:`\mathbb{Z},\mathbb{Q},\mathbb{R},\mathbb{C}` 는 덧셈 :math:`+`  에 대해 군을 형성한다. 
곱셈에 대해서도 :math:`\mathbb{Q},\mathbb{R},\mathbb{C}` 는 군을 형성하지만, 정수 집합 :math:`\mathbb{Z}` 은 군을 형성하지 않는다.  
 
어느 대수 구조가 군임을/군이 아님을 보인다는 것은 그 대수 구조가 군 공리계를 만족/불만족함을 보인다는 것이다. 
다음을 통해 예를 들어보자

.. math:: 
    
    (\mathbb{Z}, +), (\mathbb{Z}, \times)

:math:`(\mathbb{Z}, +)`

1. 연산에 대해 닫힘(Closure)
    .. math::

        \forall a,b \in \mathbb{Z} \\

        c := a+b \text{   also}  \in \mathbb{Z}  

2. 항등원의 존재 (Existence of identity)
    .. math::

        \forall a \in \mathbb{Z} \\

        0  \in \mathbb{Z} \text{   and    } a+0 = 0+a  = a  

3. 역원의 존재 (Existence of inverse element)
    .. math::

        \forall a \in \mathbb{Z} \\

        \exists -a \in \mathbb{Z} \text{  and  } a+(-a) = (-a) +a=0  

4. 결합 법칙 (Associative law)
.. math:: 
    
    \forall a ,b,c \in \mathbb{Z}\\
    (a+b) +c = a+(b+c)

따라서 :math:`(\mathbb{Z}, +)`  는 위의 4가지 아벨군 공리들을 만족하므로 아벨군을 이룬다. 

:math:`(\mathbb{Z}, \times)`

3.역원의 존재
.. math::

    \forall a \in \mathbb{Z} \\

    \nexists a^{-1} \in \mathbb{Z} \text{  such that } a\times(a^{-1}) = (a^{-1}) \times a=1  

이러한 역원이 존재하지 않으므로 :math:`(\mathbb{Z}, \times)` 는 군 공리들을 전부 만족시키지 못한다. 
따라서 이는 군을 형성하지 않는다 [#Desc]_ (1,2,4 는 만족한다.)


체와 표수
------------------------------

체(Field),환(Ring)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. proof:definition:: 체 field
    
    대수 구조 :math:`(F,+,\cdot)` 가 다음을 만족할 때, 이를 **체** (Field)라 한다. 


    1. :math:`(\mathbb{F} ,+ )` 가 아벨군이다.
    2. :math:`(\mathbb{F}  \setminus \{ 0 \} ,\cdot )` 가 아벨군이다.
    3. :math:`+, \cdot` 이 분배법칙(Distributive)을 만족한다.

    .. math::

        (a+b) \cdot c = a \cdot c +b\cdot c \ \forall a,b,c \in \mathbb{F}               


유의할 점이 미적분학을 배우고 왔다면, 스칼라나 벡터 장( *field* )에 대해서도 배웠을 터인데, 
영어 단어가 똑같이 장과 체에 대해 *field* 로 쓰여, 같은 대상인지 혼동이 올 수도 있다. 
정의에서 보다시피 다른 대상이다. 여기서 말하는 *field* 는 대수 구조의 하나를 말하는 것이고, 
미적분에서 배운 *field* 는 수학적 공간에 스칼라, 벡터 아니면 텐서가 대응된 공간을 말하는 것이다. 

이러한 혼란은 본래, 이 대수 구조가 처음 만들어졌을 당시, 독일어로 영역을 나타내는 *Bereich* 란 이름을 가지고 있었는 데, 
영어권에서 해당 개념을 번역해 사용할 때, *field* 를 사용해 나타났다. 
유럽권에서는 체를 나타내는 단어로 라틴어 *corpus* (영어의 *body* )를 어원으로 한 단어를 사용한다.

2번에서 :math:`(\mathbb{F}  \setminus \\{0\\},\cdot )` 의 종류에 따라 체가 아닌 다른 대수 구조가 만들어진다.

* 아벨군: 체
* 군:  가환체(Skew-field)
* 모노이드: 가환환(Commutative-ring)
* 가환모노이드(Commutative-monoid): 환(Ring)


:math:`(\mathbb{F} , +,\cdot )` 에서 :math:`+` 를 덧셈, :math:`\cdot` 을 곱셈이라 한다.

체는 두 개의 연산자가 모두 아벨군임을 만족하고 그 사이의 분배 법칙이 성립할 때, 만들어진다.   

군에서 이야기한 ( :math:`\mathbb{N},\mathbb{Z},\mathbb{Q},\mathbb{R},\mathbb{C}` )와 덧셈 :math:`+` , 곱셈 :math:`\times`  연산자를 살펴보도록 하자.  
:math:`\mathbb{N}` 와 :math:`\mathbb{Z}` 는  :math:`+` 에 대해 아벨군을 이루지만, 
:math:`\times` 에 대해서는 아벨군을 이루지 않는다. 
따라서 이들은 제외하고 남은 집합 중 :math:`\mathbb{Q}` 에 대해 생각해보자 

.. math::
    
    (\mathbb{Q}, +, \times)

이 대수 구조는 체를 형성한다. 

:math:`(\mathbb{Q}, +, \times)`  뿐만 아니라 :math:`(\mathbb{R}, +, \times)` , :math:`(\mathbb{C}, +, \times)`  또한 대표적인 체이다.

다음은 체의 대표적인 성질이다.  

.. proof:theorem::

    .. math::

        \forall a, b, c \in F, arbitrary \\
        a+b = c+b \rightarrow a=c \\
        if \ b\neq 0 \ \  a \cdot b = b \cdot c \rightarrow a=c

.. proof:corollary::

	체에서 각 연산의 항등원(0,1)은 유일하다. 



우리가 실수 체 :math:`\mathbb{R}` 에서 익숙하게 쓰는  0,1의 성질들이 체 자체의 정의로부터 비롯된다.    


.. proof:theorem::

    모든 체 :math:`F` 와 :math:`\forall a,b \in F` 에 대해 다음이 성립한다. 

   .. math::
       
       a \cdot 0 = 0 \cdot a = 0\\
       -( a \cdot b) = (- a) \cdot b = a \cdot (-b)

.. proof:corollary::

	    0은 곱셈 역원이 없다.


표수(Charateristic)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. proof:definition:: 표수 Charateristic


            .. math:: 
                
                char(F) \in \mathbb{N} \\
                char(F)  :=
                \begin{cases}
                  min \lbrace n \in \mathbb{N}_+ : \overbrace
                {1+1+1+ \cdots+1}^{n} = 0 \rbrace  \textrm{ if n exist} \\\\
                  0 \textrm{  otherwise}
                \end{cases}



예를 들어 :math:`char(\mathbb{Q}) = char(\mathbb{R}) =char(\mathbb{C}) = 0` 이다.

.. proof:theorem:: Prime property of charateristic

    :math:`char(F)=n`  에서 :math:`n` 은 0 아니면 소수이다. 


유한체(Finite Filed)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

지금까지는 :math:`\mathbb{Q},\mathbb{R},\mathbb{C}`  등의 원소 갯수가 무한한 체만을 다루었지만, 
사실 유한한 원소로 이루어진 체도 존재한다. 
대표적인 예시가  

.. math::
    
    \mathbb{Z}_n := \mathbb{Z}/n \mathbb{Z} =\lbrace 0,1,2, \dots ,n-2, n-1 \rbrace  

에서 :math:`n = prime` 인 경우이다 [#conguence]_ .
이때, 
.. math::
    
    (\mathbb{Z}_n,+,\cdot)

은 체를 이룬다. 단, :math:`n \neq prime`  인 경우에는 해당하지 않는다. 
이 경우 환을 이룬다. 


Ordered Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

어느 Order 연산이 정의된 집합이 체 공리계를 만족한다면 이는 Ordered Field라 불린다. 이 Ordered Field는 특이한 성질이 있는데, 


참고문헌과 추가자료
=======================================================

* Judson, T.W, Abstract Algebra: Theory and Applications, ISBN:9781944325107, 2019, Orthogonal Publishing L3C.


.. rubric:: 각주

.. [#Abel] 군론을 연구한 노르웨이 수학자 닐스 헬라크 아벨(Niels Henrik Abel)의 이름을 땄다. 이 책에서는 가환군 보다는 아벨군을 사용할 것이다.
.. [#연산] 물론 다른 형태로 이들을 연산으로 정의할 수도 있다. 다만, 역원 공리를 만족한다면 그 자체로 충분하다는 것이다.
.. [#Desc] 이러한 대수 구조가 공리들을 만족시키는 것을 명확히 보이기 위해서는 집합과 연산자를 정의한 이후에 그들의 정의와 성질로부터 공리계를 만족하는지 아닌 지를 판별해야 한다. 
           위의 내용은 단순히 우리가 익숙한 집합과 연산을 이용해 판별하는 예시를 보인 것으로 정확한 설명이 아니다. 
           일례로 단순히 정수의 집합을 정의부터 시작하면 상당히 긴 페이지를 할애해야 한다. 
.. [#conguence] :math:`\mathbb{Z}_n` 는 합동류(conguence class)로 번역된다. 
                각각의 원소 :math:`n` 은 합동식의 결과가 같은 정수 전체를 의미한다. 
                예를 들자면 :math:`\mathbb{Z}_5` 에서 :math:`7 \equiv 2( \textrm{ mod } 5) ` , :math:`12 \equiv 2 (\textrm{ mod } 5)` 
                이므로 :math:`7 \equiv 12 ` 이다. 
                즉, :math:`\mathbb{Z}_5` 의 어느 한 원소 3은 :math:`n \equiv 3(\textrm{ mod } 5)` 인 정수 전체를 의미하는 것이다.

