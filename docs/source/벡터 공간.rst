************************
벡터 공간
************************

본 단원에서는 선형 대수학의 핵심 내용인 벡터 공간에 대해서 다룬다. 
고등학교 시절과 대학교 1학년의 미적분학, 일반 물리학 등에서 벡터라는 개념에 대해 이미 공부를 했을 것이다. 
이러한 과정에서 벡터는 **크기** 와 **방향** 을 가지는 양이라 정의한다.
수학에서 해당 과정에서 배우는 벡터는 유클리드 벡터를 의미한다. 

선형 대수학에서 벡터의 정의는 사뭇 다르다. 
여러 심화 수학 부분에서는 우리가 알고 있는 개념들이 다른 정의나 수학적 용어들을 사용해 재정의되는 경우가 많은데, 
이러한 엄밀한 재정의는 대상의 수학적 모호성을 줄이고 개념의 오용을 방지한다 [#오용]_ . 
선형대수학 이후 수학에서 우리가 쓰는 벡터는 결국 **벡터 공간의 원소** 를 의미할 것이다. 
미적분학의 벡터는 특정한 벡터 공간의 원소이다. 이를 유클리드 공간이라 부른다.


벡터 공간 (Vector Space)
==========================================


.. proof:definition:: 벡터 공간 Vector Space

    어떤 체 :math:`\mathbb{ F}` 와 집합 :math:`V` , 그리고 이항 연산자

    .. math::

        + : V \times V \rightarrow V \\ 
        \cdot: \mathbb{F} \times V \rightarrow V

    가 다음의 공리 5개를 만족할 때, 이를 체 :math:`\mathbb{F}` 위의 **벡터 공간** 이라 부른다.

    * :math:`(V, +)` 가 아벨군을 이룬다.
    * :math:`1 \cdot \textbf{v} = \textbf{v} \in V, 1 \in \mathbb{F}`
    * :math:`(\lambda_1 \lambda_2) \cdot \textbf{v} = \lambda_1 \cdot(\lambda_2 \cdot \textbf{v}) \forall \lambda_1, \lambda_2 \in \mathbb{F}, \textbf{v} \in V`
    * :math:`\lambda(\textbf{a+b}) = \lambda \textbf{a} + \lambda \textbf{b} \forall \lambda \in \mathbb{F}, \textbf{a,b} \in V`
    * :math:`(\lambda_1 + \lambda_2)\textbf{a} =\lambda_1 \textbf{a}+\lambda_2\textbf{a}`


이때, :math:`V` 의 원소 :math:`\textbf{a} \in V` 를 **벡터(vector)** 라고 부르며, 
:math:`\mathbb{F}` 의 원소 :math:`\lambda \in \mathbb{F}` 를 **스칼라(scalar)**
라 부른다.

:math:`\textbf{x,y} \in V, \lambda \in \mathbb{F}` 에 대해, 
:math:`\textbf{x+y}` 를 벡터의 합(sum)이라 부르고, 
:math:`\lambda \cdot \textbf{x}` 를 스칼라 곱(product)이라 부른다.

벡터 공간의 공리 1.을 보면 :math:`(V, +)` 가 아벨군을 이루는 것을 알 수 있다. 
따라서 아벨군 공리계에 따라 이는 항등원(identity element)를 가짐을 알 수 있다. 
이러한 항등원은 **영 벡터(0-vector)** 라 불린다. 

영 벡터는 일반적으로 :math:`\textbf{0}` 로 표기한다. 
여러 공간을 동시에 다룰 때에는 어느 공간의 항등원인지 표기 하기 위해 
:math:`\textbf{0}_V` 등으로 표기하기도 한다. 

이러한 벡터공간의 예시로 여러가지가 존재한다. 하나하나 살펴보면, 

* 체와 체의 n 튜플 (:math:`\textbf{F}, \textbf{F}^n`) 

* 체위에 정의된 :math:`m \times n` 행렬 공간: :math:`M_{m \times n}(\mathbb{F})` 

* 공집합이 아닌 정의역에서 체로 정의된 연속 함수들

* 체 위에서 정의된 다항식

* 체로 정의된 수열

이 외에도 많은 벡터 공간들이 존재한다. 그중 일부는 물리, 수학에서 유용하게 쓰이는 공간들이고, 
그 공간들이 벡터 공간의 공리를 만족시킨다면, 벡터 공간에서 나온 여러 정리들을 적용시킬 수 있음을 의미한다.  


.. proof:Theorem:: Cancellation Law

    :math:`\textbf{x,y,z} \in V`에 대해, :math:`\textbf{x+z=y+z}`라면, :math:`\textbf{x=y}` 이다.

.. proof:Corollary:: Cancellation Law

    :math:`\textbf{0}` 는 유일하다.
    
    각 원소 :math:`\textbf{x}`의 덧셈 역원 :math:`\textbf{-x}` 또한, 각각에 대해 유일하다. 




부분 공간(Sub Space)
==========================================

대수학에서 대수 구조에 **부분** (Sub)이라는 붙은 용어를 쉽게 찾아 볼 수 있다. 
기본적으로 우리가 본 대수 구조들에서도 부분 집합(Sub set), 부분 군(Sub group), 부분 체(sub field) 등등 다양한 부분 대수 구조들이 존재한다. 
부분이라는 말은 우리가 말하고 있는 대수 구조가 보다 큰 규모의 대수 구조에 들어가 있다는 것을 말한다. 
이 말은 다음 두 가지를 의미한다. 

1. 대수 구조를 이루는 집합의 모든 원소가 포함되는 대수 구조의 집합의 원소이다. 
2. 부분이라고 부르는 대수 구조는 그 스스로 완전한 대수 구조여야 한다.

예를 들어서 집합을 보자. 집합은 가장 기초적인 대수 구조이다. 
연산자 없이 원소들이나 범주만으로 정의된다. 
즉, 원소 자체로 그 스스로 완전한 집합을 이룬다. 어떤 집합 :math:`B` 의 모든 원소가 :math:`A` 의 원소라면, 
이것으로 충분하다. 
우리는 이때, 집합 :math:`B` 를 :math:`A` 의 부분 집합이라 부르고 이를 다음과 같이 표기한다.

.. math:: 
    
    B \subset A

반면, 연산자가 정의된 대수 구조는 양상이 조금 다른데, 1. 조건을 만족한다 하더라도, 2.를 만족 시키기 위해서는 연산자들이 정의되어야 한다. 
이때, 부분 대수 구조가 가지는 연산자는 이 대수 구조를 포함하는, **주 대수 구조가 가지는 연산자** 여야 한다. 
즉, 다시 말해 스스로 완전한 대수 구조라는 말의 의미는, 
주 대수 구조에서 정의된 연산자에 대해 부분 대수 구조를 이루는 집합의 원소들이 완전한 대수 구조를 이룸을 의미한다. 
완전한 대수 구조는 간단하게 판단 할 수 있다. 어느 대수구조의 부분 집합의 원소들은 당연히, 
해당하는 대수 구조의 공리들을 모두 만족한다. 
즉, 파악해야 하는 부분은 연산자가 **부분 집합에 대해 닫혀있는 지** 와 
대수 구조 공리계에 따라 **필수적인 원소의 유무** 만 보면 된다.

우리가 다루고 있는 벡터 공간이라는 대수 구조에서도 이러한 부분 구조를 볼 수 있다. 
이를 **부분 공간(sub space)** 라 부른다.


.. proof:definition:: 부분 공간 Sub space

    체 :math:`\mathbb{ F}` 위에 정의된 벡터 공간 :math:`(V,+,\cdot)` 에 대해 집합 :math:`W` 가 다음을 만족한다. 

    * :math:`W \subset V`
    * :math:`(W,+_W, \cdot _W)` 이 벡터 공간을 이룬다.

    이때, :math:`(W, +_W, \cdot _W )` 을  **벡터 공간 ** :math:`(V,+,\cdot)` **의 부분 공간** 이라 부른다.


.. proof:Theorem:: 

    벡터 공간 :math:`(V, +, \cdot)` 에 대해 다음이 성립한다.

    집합 :math:`V`의 부분 집합 :math:`W`는 부분 공간을 이루면,
    집합 :math:`W`가 :math:`(V, +, \cdot)`의 이항 연산 :math:`+, \cdot`에 대해 닫혀있고, 
    :math:`W \neq ∅` 이다.  


.. proof:Theorem:: 

    벡터 공간 :math:`(V, +, \cdot)` 의 부분 공간 :math:`W_1, W_2` 에 대해 다음이 성립한다.

    * :math:`W_1 \cap W_2`
    * :math:`W_1 + W_2 = \{w_1+w_2 | w_1 \in W_1, w_2 \in W_2 \}`

    는 벡터 공간 :math:`(V, +, \cdot)` 의 부분 공간을 이룬다.


선형 결합(Linear combination)
==========================================


.. proof:definition:: 선형 결합 Linear Combination

    체 :math:`\mathbb{ F}`, 위에 정의된 벡터공간 :math:`V`에 대해, 
    :math:`\lambda_1, \dots, \lambda_n \in \mathbb{F}` 이고
    :math:` \bf{v}_1 ,\dots , \bf{v}_n \in V`` 일 때,

    .. math::

        \sum_{i=1}^n \lambda_i \bf{v}_i
    
    를 :math:`\bf{v}_i` **의 선형 결합** 이라 부른다.
    이때, :math:`\lambda_i` 를 **선형 결합의 계수** 라 부른다.    



3 차원 실수 공간( :math:`\mathbb{R}^3` )의 벡터 :math:`\bf{a} = (4,3,5)` 를 생각해보자, 
일반적으로 각각의 성분들이 :math:`x,y,z` 축 방향 성분의 크기를 나타내는 것을 잘 알고 있다. 
이 축을 나타내는 벡터를 :math:`({\bf{e}}\_i)_{i=1}^3` 이라 해보자

.. math:: 
        
        \hat{\bf{e}}_1 = (1,0,0) \\
        
        \hat{\bf{e}}_2 = (0,1,0) \\
        
        \hat{\bf{e}}_3=(0,0,1)

로 볼 수 있고, 이제 우리는 벡터 :math:`\bf{a}` 를 :math:`\hat{\bf{e}_i}` 의 선형 결합으로 나타낼 수 있다.

.. math:: 
        
        \vec{\bf{a}} = \sum_{i=1}^3 \lambda_i {\bf{e}_i} = 4 \cdot \hat{\bf{e_1}}+3 \cdot \hat{\bf{e_2}}+5 \cdot \hat{\bf{e_3}}

이렇게 벡터를 다른 벡터들의 선형 결합으로 표현하는 것은 문제를 풀거나 이해할 때 매우 중요한 도구가 되어준다.


.. proof:definition:: 생성 span


    체 :math:`\mathbb{F}`위에 정의된 벡터 공간 :math:`(V,+,\cdot)`에 대해, 
    어느 집합 :math:`S`가 :math:`S \neq ∅, S \in V` 일 때, 

    .. math::
        
        \text{span}(S) = \{ \sum_{i=1}^n \lambda_i {\bf{x}_i} : \lambda_i\in {\mathbb{F}}, {\bf{x}_i} \in S \}
    
    를 벡터 집합 :math:`S` **의 생성** (span)이라 한다.           


이러한 생성은 여러 성질을 가진다. 다음은 생성의 성질들이다.

* :math:`\text{span}(\emptyset) = \{\bf{0}\}``
* :math:`S \subset \text{span}(S)``
* :math:`A \subset B \to \text{span}(A) \subset \text{span}(B)``
* :math:`\text{span}(\text{span}(A)) \subset \text{span}(A)``


만약,  벡터공간 :math:`V` 의 부분 집합 :math:`A` 에 대해, :math:`A = \text{span}(A)` 이라면 
:math:`A` 는 벡터공간 :math:`V` 의 부분 공간이다. 이 역 또한, 성립한다.


.. proof:definition:: 선형 생성 Linear span

    벡터 공간 :math:`V` 에 대해, 
    그 부분 집합 :math:`S` 가 :math:`\text{span}(S) = V` 를 만족한다면, 
    벡터 집합 :math:`S` 가 벡터 공간 :math:`V`를 **생성** (spans) 아니면 **선형 생성** (linear generates)한다고 부른다.          
  

선형 독립(Linear independence)
==========================================

어떠한 벡터 공간 :math:`V`의 원소 :math:`\bf{v}` 의 경우 
그 벡터 공간 안의 다른 벡터들 :math:`\{ \bf{v}\_{i}\}\_{i=1}^n` 과 
계수 :math:`(\lambda\_{i})\_{i=1}^n` 에 대해 다음과 같이 선형 결합으로 표현할 수 있다.


.. math::
    
    \bf{v} = \sum\_{i=1}^{n} \lambda\_i \bf{v}\_i


이때, 계수들 :math:`(\lambda\_{i})\_{i=1}^n` 가 유일할 필요는 없다. 
이는 유일할 수도 유일하지 않을 수도 있다. 이러한 유일성의 유무를 이용해 주어진 벡터 집합의 특성을 정의할 수 있다.

.. proof:definition:: 선형 독립 Linearly Independence


    벡터 공간 :math:`V` 와 그 부분 집합 :math:`S` 에 대해, :math:`S = \{ \bf{x}\_1, \dots, \bf{x}\_n \}` 는 다음을 만족할 때, 
    **선형 독립** (linearly independent)이라 한다.

    :math:`{\forall \bf{v}} \in V` 에 대해, 
    오직 하나의 :math:`(\lambda\_{i})\_{i=1}^n` 만이 존재해 다음을 만족한다.

    .. math::

        \bf{v} = \sum\_{i=1}^{n} \lambda\_i \bf{v}\_i

    다른 경우, :math:`(\lambda\_{i})\_{i=1}^n` 가 유일하지 않은 경우에, 이를 :math:`S` 가 **선형 종속** (linear dependent)이라 한다.         


이 정의 외에 다른 정의로도 선형 독립을 정의할 수 있다. 


:math:`\mathbf{0} = \sum\_{i=1}^N \lambda\_i \mathbf{v}\_i` 을 만족하는 
:math:`\{ \lambda\_i \}\_{i=1}^N` 이 유일하게 존재한다.



이 정의는 위의 정의와 동치 관계이다. 
이 정의는 실제 어느 집합이 선형 독립인지 판단할 때, 유용하게 쓰인다. 
하나의 벡터(영 벡터)의 선형 결합이 유일한지 결정하는 것만으로 독립성을 판별할 수 있기 때문이다.

.. proof:Theorem::
        
* :math:`\emptyset` 은 선형 독립이다.
* 선형 종속 집합 :math:`S` 는 :math:`|S| > 0` 을 만족한다.
* 선형 독립 집합 :math:`S` 과 벡터, :math:`\mathbf{v}\in V` 에 대해, :math:`\mathbf{v}\in \text{span}(S)` 이면, :math:`S \cup \{ \mathbf{v} \}` 는 선형 종속이다.
*  선형 독립 집합 :math:`S` 과 벡터, :math:`\mathbf{v}\in V` 에 대해,:math:`\mathbf{v}\notin \text{span}(S)` 이면, :math:`S \cup \{ \mathbf{v} \}` 는 선형 독립이다.
* :math:`S\_1 \subseteq S\_2 \subseteq V` 에 대해, :math:`S\_1` 이 선형 종속이면, :math:`S\_2` 도 선형 종속이다.
* :math:`S\_1 \subseteq S\_2 \subseteq V` 에 대해, :math:`S\_2` 이 선형 독립이면, :math:`S\_1` 도 선형 독립이다.



기저(Bases)
==========================================

어떤 체 :math:`\bf{v}` 위에 정의된 벡터 공간 :math:`V` 에서, 
내부의 부분 집합 :math:`S` 의 원소들의 선형 결합으로 벡터 공간 :math:`V` 의 어느 원소 :math:`\bf{v}` 를 
:math:`\mathbb{F}` 의 원소에 속하는 계수 :math:`(\lambda\_{i})\_{i=1}^n` 와 함께 표현할 수 있음을 알았다. 
또, 이러한 :math:`S` 를 적절히 잡으면 각각의 벡터의 선형 표현을 유일한 :math:`(\lambda\_{i})\_{i=1}^n` 로 표현할 수 있음을 알 수 있다. 
이를 선형 독립적인 벡터 집합이라 한다. 만약, :math:`S` 의 원소들이 벡터 공간 전체의 원소를 선형 결합으로 유일하게 나타낼 수 있다면, 
이러한 :math:`S` 를 통해서 벡터 공간을 분류하고 성질을 나타내어 볼 수 있다. 이러한 :math:`S` 를 **기저** (Basis)라 부른다.

.. proof:definition:: 기저 Basis


    벡터 공간 :math:`V` 와 그 부분 집합 :math:`S` 에 대해, :math:`S` 가 :math:`V` 의 선형 독립 부분 집합이고, 
    :math:`\text{span}(S) = V` 를 만족하면, 이 때 :math:`S` 를 :math:`V` 의 **기저** (Basis)라고 부른다.       

    .. math::

        \Longleftrightarrow \forall {\bf{v}} \in V, \exists ! (\lambda\_1, \dots, \lambda\_n) \text{    s.t  } {\bf{v}} = \sum\lambda\_i  {\bf{v}}\_i \\
        S= \\{ {\bf{v}}\_i \\}\_{i=1}^N 

이러한 기저 조건을 만족하는 벡터 집합은 유일하지 않다. 주어진 기저로 부터 다른 기저를 만들수도 있고 상황에 맞게 적절한 기저를 선택할 수도 있다. 
다만 각각의 공간에 대해 공통적으로 많이 쓰이는 표준 기저들이 존재한다.

* :math:`\mathbb{F}^n` 의 표준 기저: :math:`\\{ {\bf{e\_i}}\_{i=1}^n \\}, {\bf{e}\_i} = (0, \dots, 0, 1, 0, \dots ,0) =(\delta\_{1i}, \dots, \delta\_{(i-1)i}, \delta\_{ii}, \delta\_{(i+1)i}, \dots ,\delta\_{Ni})`
* :math:`M\_{m \times n}(\mathbb{F})` 의 표준 기저: :math:`\\{ E^{ij} \\}, (1 \le i \le m, 1 \le j \le n )` , :math:`(E^{ij})\_{kl} = \delta\_{ik} \delta\_{jl}`
* :math:`\mathcal{P}\_{n}(\mathbb{F})` 의 표준 기저: :math:`S= \\{ 1, x, x^2, \dots, x^n\\}`
* :math:`\mathcal{P}(\mathbb{F})` 의 표준 기저: :math:`S= \\{ 1, x, x^2, \dots, \\}`

그런데 벡터 공간을 이루는 원소가 동일하다 하더라도 체가 달라지면, 벡터 공간의 구조도 달라지게 된다. 
예를 들어서 :math:`\mathbb{R}` 과 :math:`\mathbb{C} `를 보면, 이 두 집합은 일반적인 실수 체 위에서 벡터 공간을 형성한다. 
이때, 체를 유리수, 복소수로 바꾸면 기저의 수가 달라지는 것을 볼 수 있다.

==============================  ===========================  =================
벡터 공간                        표준 기저                     기저의 수
==============================  ===========================  =================
:math:`\mathbb{R}(\mathbb{R})`  :math:`(1)`                   1
:math:`\mathbb{R}(\mathbb{Q})`  :math:`S`                     :math:`\infty`
:math:`\mathbb{C}(\mathbb{R})`  :math:`(1,i)`                 2
:math:`\mathbb{C}(\mathbb{C})`  :math:`(1)` or :math:`(i)`    1
==============================  ===========================  =================

:math:`\mathbb{R}(\mathbb{Q})` 의 기저가 무한 개인 이유는 실수에 포함되어 있지만, 
유리수에는 포함되어 있지 않은 **무리수** (Irrational number) 때문이다. 
이 무리수는 유리수들로 나타낼 수 없으며, 무한 개이기 때문에, 이들 하나하나를 모두 기저로 잡아 주어야 한다. 
대표적인 무리수로 :math:`\sqrt{2},  \sqrt{3}`이 있고, 그 안의 무리수의 일종으로 **초월수** (transcendental number)가 있다. 
대표적인 초월수로 :math:`\pi` 와 :math:`e` 가 있다.

.. proof:Theorem:: 
        
    벡터 공간 :math:`V` 와 그 유한 부분 집합 
    :math:`S= \\{ {\bf{x}_1}, \dots, {\bf{x}_n}  \\}` 에 대해, 
    만약 :math:`\text{span}(S) = V` 라면, 벡터 공간 :math:`V` 의 기저에 대해, 
    다음을 만족하는 기저:math:`S'` 가 존재한다.



.. proof:Theorem::  대체 정리 Replacement Theor
        
    체 :math:`\mathbb{F}` 위에서 정의된 벡터 공간 :math:`V` 와 그 부분 집합 :math:`G\subseteq V` 에 대해, 
    :math:`G` 가 :math:`V` 의 생성 집합이고 :math:`|G|=n` 이라 하자. :math:`V` 의 선형 독립 부분 집합 
    :math:`L \subseteq V` 가 존재해, :math:`|L| = m` 일 때, :math:`m \le n` 이고, :math:`G` 의 부분 집합 :math:`H` 가 존재해 다음을 만족한다.

    .. math::

        |H| = n-m \text{ s.t } \text{ span}(L \cup H) = V

.. proof:Theorem::  대체 정리 Corollary 1

체 :math:`\mathbb{F}` 위에서 정의된 벡터 공간 :math:`V`와 그 기저 :math:`G` 가 
:math:`|G|=n<\infty` 를 만족하면, :math:`V` 의 다른 기저 :math:`G' \neq G` 가 존재할 때, 

.. math::
    
    |G'| = |G| = n

을 만족한다.  


대체 정리는 다시 말해

1. 모든 선형 독립적인 부분 집합은 생성 집합의 원소보다 작거나 같다.
2. 어떠한 선형 독립 부분 집합:math:`L` 과 생성 부분 집합:math:`G` 에 대해, :math:`G` 의 일부 원소를 :math:`L` 과 합해 새로운 생성 집합을 만들 수 있다.

를 의미한다. 

.. proof:definition:: 공간의 차원 Dimension

        
    벡터 공간 :math:`V` 의 차원은 :math:`V` 의 기저 :math:`S` 의 크기 :math:`|S|` 를 
    이 벡터 공간 :math:`V` 의 **차원** (dimension)이라 한다.


벡터 공간의 차원은 무한할 수도 유한할 수도 있다. 만일 벡터 공간이 유한할 경우 기저가 유한해 유한한 차원을 가진다. 
무한할 경우에는 기저가 무한할 수도, 유한할 수도 있다. 

차원의 개념이 있다면 대체 공간의 따름 정리 2를 볼 수 있다.


.. proof:Theorem::  대체 정리 Corollary 2

    체 :math:`\mathbb{F}` 위에서 정의된 벡터 공간 :math:`V` 가 :math:`\text{dim}(V)=n <\infty` 일 때, 그 부분 집합 :math:`S \subseteq V` 에 대해 다음이 성립한다.

    1. :math:`\text{span}(S) =V` 일 때, :math:`|S| \ge n` 이다. 만일  :math:`|S| = n` 이면, :math:`S` 는 :math:`V` 의 기저이다.
    2. :math:`S` 가 선형 독립 부분 집합일 때, :math:`|S| =n` 이면, :math:`S` 는 :math:`V` 의 기저이다.
    3. 모든 선형 독립 부분 집합 :math:`S` 는 :math:`V` 의 기저로 확장할 수 있다.
    4. 모든 생성 부분 집합 :math:`S` 은 :math:`V` 의 기저로 줄일 수 있다.


.. proof:Theorem:: 
     
    벡터 공간 :math:`V` 와 그 부분 집합 :math:`S` 에 대해, :math:`S` 가 유한 부분 집합이고, 
    :math:`\text{span}(S) =V` 이면, 벡터 공간 :math:`V` 의 유한 기저 :math:`S'` 가 존재해, :math:`\text{dim}(V) < \infty` 가 성립한다.

한가지 들 수 있는 의문점은 우리가 차원을 기저를 통해 정의했다는 점이다. 
이 말은 벡터 공간이 기본적으로 기저를 가지고 있다는 가정을 전제로 하고 있다. 
그런데 아직 우리는 벡터 공간에 대해, 기저의 존재성을 논하지 않았다. 
이는 **초론의 보조 정리(Zoron's lemma)** 라는 선택 공리계와 동치인 정리를 이용해서 증명해야 한다. 
이는 현재 단계에서는 공리로써 받아들이고 넘어가도록 하자, 이후 우리가 무한 차원의 공간을 다룰 때, 다시 보도록 하자.


.. proof:definition:: 부분 공간의 차원 Dimension of subspace

    체 :math:`\mathbb{F}` 위에서 정의된 벡터 공간 :math:`V` 에 대해, 
    부분 공간 :math:`W \subseteq V` 이 있다면, 다음이 성립한다.

    .. math::

        \text{dim}(W) \le \text{dim}(V) \&


---

(응용)라그랑주 보간법
========================================== 

선형 대수학의 중요 개념은 어떤 대상이든지 간에 그 대상의 집합과 연산이 벡터 공간의 공리계를 만족하면 
그 대상을 벡터로 보고 여러 정리와 정의들을 응용할 수 있다는 것이다. 이러한 예시로 **라그랑주 보간법(Lagrange interpolation)** 을 볼 수 있다. 
보간법(interpolation)이란, 우리가 알고 있는 값 지점들을 이용해 그 지점들 사이의 값을 추정하는 것이다. 

라그랑주 보간법은 :math:`n` 개의 지점을 :math:`n` 차 다항식을 통해 근사한다. 
이때, 쓰이는 다항식을 라그랑주 다항식이라 하는데 다음과 같이 정의된다.


.. proof:definition:: 라그랑주 다항식 Lagrange polynomial

        
    체 :math:`\mathbb{F}` 에서 정의된 크기 :math:`n+1` 의 스칼라 집합 :math:`\\{c_0, c_1, \dots, c_n \\}` 에 대해, 
    크기 :math:`n+1` 의 다항식 집합 :math:`\\{ f_0, f_1, \dots, f_n \\}` 과 그 원소를 다음과 같이 정의한다.

    .. math:: 
        
        f_i (x) =  \prod_{ {k=0 \atop k \neq i} }^{n} \frac{x- c_k}{c_i - c_k} 

    이를 **라그랑주 다항식** (Lagrange polynomial)이라 부른다.



정의에 따라 다음을 알 수 있다.

* :math:`f\_i \in \mathcal{P}\_n(\mathbb{F})`
* :math:`f\_i (c\_j) = \delta\_{ij} =\begin{cases} 1 & i=j \\\\ 0 &  i \neq j \\ \end{cases}`

이때, 라그랑주 보간법은 이러한 라그랑주 다항식이 :math:`\mathcal{P}\_n(\mathbb{F})` 의 기저를 만족해 
:math:`\\{c\_0, c\_1, \dots, c\_n \\}` 점을 모두 지나는 유일한 :math:`n` 차 다항식을 찾을 수 있다는 것을 기반으로 한다. 
이는 벡터 공간의 대체 정리를 통해 증명할 수 있다.

먼저, :math:`\\{ f\_0, f\_1, \dots, f\_n \\}` 의 선형 독립성을 증명하면,

.. math:: 
    
    \sum\_{i=0}^n a\_i f\_i (x)=0, \forall x \in \mathbb{F}
    
에 대해, :math:`x \in \\{c\_0, c\_1, \dots, c\_n \\}` 이라면, 다음을 알 수 있다.

.. math::
    
    \sum\_{i=0}^n a\_i f\_i (c\_j)=a\_j 

따라서 선형 독립 조건을 만족하는 계수 :math:`\{ a\_i \}\_{i=0}^n` 은 :math:`a\_i = 0, \forall i` 임을 알 수 있다. 
따라서 :math:`\\{ f\_0, f\_1, \dots, f\_n \\}` 은 :math:`\mathcal{P}\_n(\mathbb{F})` 의 선형 독립 부분집합이다.

:math:`\mathcal{P}\_n(\mathbb{F})` 의 차원=기저 집합의 크기는 :math:`n+1` 이고 
선형 독립 부분 집합 :math:`|\\{ f\_i\\}\_{i=0}^n| = n+1` 임을 알 수 있다. 
여기서 대체 정리의 따름 정리 2-2를 이용하면, :math:`\\{ f\_i\\}\_{i=0}^n`가 :math:`\mathcal{P}\_n(\mathbb{F})` 의 기저 조건을 만족함을 알 수 있다.

따라서 :math:`\mathcal{P}\_n(\mathbb{F})` 에 속한 모든 :math:`n` 차 다항 함수는 :math:`\\{ f\_i\\}\_{i=0}^n` 의 선형 결합으로 표현할 수 있다.

이를 이용하면 다음을 보일 수 있는데, :math:`n` 차 다항 함수 :math:`g` 에 대해,

.. math::
    
    g = \sum\_{i=0}^n \lambda\_i f\_i\\
    g(c\_j) = \sum\_{i=0}^n \lambda\_i f\_i = \lambda\_j\\
    g = \sum\_{i=0}^n g(c\_j) \_i f\_i

형태로 유일한 선형 결합 표현을 찾을 수 있고, 
이를 이용해, :math:`n+1` 개의 지점을 지나는 
:math:`n` 이하의 차수를 가지는 유일한 다항 함수를 찾을 수 있다.

이를 **라그랑주 보간법(Lagrange interpolation)** 이라고 한다.


행렬
============


여러 추상적인 수학적 대상을 실제 문자로 나타내는 방법은 여러가지가 있다. 함수의 경우 문자 + (변수)를 이용하고 수열은 문자_index 등의 표기를 사용한다. 여러가지 예시가 있지만, 공통적으로 이러한 표기법들은 그러한 대상들의 성질을 잘 표현하고 연산에서 편리성을 보장해준다. 

**행렬(Matrix)** 은 수학에서 자주 쓰이는 표현으로 텐서(tensor), 선형 계(linear system)의 표현, 미분 방정식의 풀이 등등 학부 이상의 고급 수학에서 활발하게 쓰인다.

행렬은 본래 연립 1차 방정식을 편리하게 표기하기 위해 고안되었다. 다음과 같이 4개의 변수를 가지는 방정식 3개를 

.. math::
    \begin{aligned}
    {a}\_{11} x\_1 +  {a}\_{12} x\_2 + {a}\_{13} x\_3 +{a}\_{14} x\_4 = b\_1   \\\\
    {a}\_{21} x\_1 +  {a}\_{22} x\_2 + {a}\_{23} x\_3 +{a}\_{24} x\_4 = b\_1 \\\\
    {a}\_{31} x\_1 +  {a}\_{32} x\_2 + {a}\_{33} x\_3 +{a}\_{34} x\_4 = b\_1 
    \end{aligned}

간단하게, 다음과 같이 표현 가능하다.

$$\bf{A} \cdot x = b$$

.. math:: 

    {\bf{A}} = 
        \begin{pmatrix} 
        a\_{11} & a\_{12} & a\_{13} & a\_{14} \\\\
        a\_{21} & a\_{22} & a\_{23} & a\_{24} \\\\
        a\_{31} & a\_{32} & a\_{33} & a\_{34} \\\\
        \end{pmatrix}, 
        {\bf{x}} = 
        \begin{pmatrix}
        x\_1 \\\\
        x\_2 \\\\
        x\_3 \\\\
        x\_4 
        \end{pmatrix}, 
        {\bf{b}} = 
        \begin{pmatrix}
        b\_1 \\\\
        b\_2 \\\\
        b\_3 
        \end{pmatrix}

이런 방정식을 선형계(Linear system)이라 부른다. 
이때, :math:`\bf{A}` 와 같은 대상을 행렬(matrix)라 부른다. 
이와 같이, 행렬은 사각형으로 배열된 원소들의 표현을 의미한다. 
각각의 원소들의 위치를 표현하기 위해서 **행(row)** 과 **열(colum)** 을 나타내는 순서쌍 
:math:`(i,j)` 을 사용한다. 행은 사각형에서 가로축을 의미하고, 
열은 세로축을 의미한다. 순서쌍에서 :math:`i` 는 행을, :math:`j` 는 열을 나타낸다. 
각 숫자는 사각형 배열의 왼쪽 위에서부터 행은 아래로, 열은 오른쪽으로 점차 증가하며 세게된다.

.. figure:: /images/matrix.png
   :scale: 100%
   :align: center



일반적으로 행렬의 전체 행과 열의 숫자를 :math:`m` , :math:`n` 으로 표기하며 
:math:`m \times n` 행렬이라는 말은 행의 갯수가 :math:`m` 이고 열의 갯수가 :math:`n` 개인 행렬을 의미한다.  


 행렬 자체는 단순한 사각형 배열이지만, 행렬이 쓰이는 이유인 **행렬의 연산** 을 고려하면, 
 수학적으로 이를 재정의 할 수 있다. 행렬도 우리가 다룬 대수 구조 처럼 덧셈과 곱셈등의 연산을 정의할 수가 있다. 
 이러한 행렬의 연산은 행렬을 이루는 원소들의 연산을 통해 만들어진다. 
 이때, 행렬의 원소들은 적어도 두 덧셈, 곱셈의 연산을 가지고 있어야한다. 
 따라서, 이를 만족하는 최소한의 대수구조는 환(Ring)이 된다. 이를 이용해 행렬을 다음과 같이 정의할 수 있다.

.. proof:definition::

    환 :math:`R`에 대해 각 행 :math:`i \in \\{ 1, 2, 3, \dots, m \\}` , 
    열 :math:`j \in \\{ 1, 2, 3, \dots, n \\}` 의 순서쌍 :math:`(i,j)` 에 
    환의 원소 :math:`A\_{ij} \in R` 를 대응 시키는 함수 :math:`A = A( (i,j) ) = A\_{ij}` 를 
    환 :math:`R`위에서 정의된 행렬 :math:`A` 라 한다.

다시말해, 행렬이란 덧셈과 곱셈이 정의된 원소들을 순서쌍에 대응시킨 함수라 볼 수 있다. 
이때, 행렬을 이루는 원소들이 속한 대수 구조에 대해 행렬이 
그 위에서 정의되었다라 한다. 일반적으로 행렬을 :math:`M` 으로 표기하고, 
:math:`A \in M` 은 :math:`A` 가 행렬이라는 뜻이다. 그러나 행렬이 실질적으로 연산을 해야하는 경우에 이는 **같은 대수구조 위에서 정의** 된 행렬에서 의미가 있고, 
행렬의 크기(행과 열의 크기)도 행렬의 성질을 결정하는 중요한 요소이므로 이를 표기에 반영해 다음과 같이 표기한다.


.. math::
    
    M\_{m \times n}(\mathbb{F})


이는 대수구조 :math:`\mathbb{F}` 위에서 정의된 :math:`m \times n` 행렬을 의미한다. 
따라서 :math:`A \in M\_{m \times n}(\mathbb{F})` 는 :math:`A` 의 원소들이 대수구조 :math:`\mathbb{F}` 의 원소들이고, 
:math:`A` 의 크기가 :math:`m \times n` 이라는 뜻이다.

일반적으로 많이 정의되는 공간은 체(Field)이다. 
대다수의 문제나 상황에서는 체 위에서 정의된 행렬을 다룬다. 



행렬의 연산
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

기초 연산
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

체 :math:`\mathbb{F}` 위에서 정의된 행렬 :math:`\mathbf{A,B} \in M\_{m \times n}(\mathbb{F})` 과 :math:`c \in \mathbb{F}` 대해, 
행렬의 덧셈, 스칼라 곱 그리고 같음은 다음과 같이 정의된다.

.. proof:definition:: 행렬의 덧셈 Addition of Matrix

    .. math::

        (\mathbf{A+ B})\_{ij} = (A\_{ij}  + B\_{ij})


.. proof:definition:: 행렬의 스칼라 곱 Scalar Multiplication of Matrix

    .. math::
        
        c \cdot \mathbf{A}\_{ij} = (c \cdot A\_{ij})



.. proof:definition:: 행렬의 비교 Equality of Matrix

    .. math::

        \mathbf{A} = \mathbf{B}\\
        \leftrightarrow  A\_{ij} =  B\_{ij}, \forall i,j




이 연산들과 함께 :math:`M\_{m \times n}(\mathbb{F})` 는 벡터 공간의 공리계를 만족하므로 벡터 공간을 형성한다.

:math:`0` 행렬은 다음과 같이 정의되고 이는 :math:`M\_{m \times n}(\mathbb{F})` 의 :math:`0` 벡터가 된다.


.. proof:definition:: 영 행렬 Zero matrix

    행렬 :math:`A \in M\_{m \times n} (\mathbb{F})`에 대해, 
    다음을 만족하는 행렬 :math:`A` 를 영행렬이라고 부른다.

    .. math::

        A_{ij} = 0_{\mathbb{F}}\\
        i=1, 2, \dots m\\
        j=1. 2. \dots n 


.. proof:definition:: 행렬의 전치 Transpose

    행렬 :math:`{\bf A} \in M\_{m \times n} (\mathbb{F})` 에 대해, 
    행렬 :math:`{\bf B} \in M\_{n \times m} (\mathbb{F})` 가 다음을 만족한다.

    .. math::

        \bf B\_{ij} = A\_{ji}


    이때, 행렬 :math:`\bf B` 를 행렬 :math:`\bf A` 의 **전치** (Transpose)라 부르고, :math:`\bf A^t` 로 표기한다.



.. math::
    {\bf{A}} = 
    \begin{pmatrix} 
    a\_{11} & a\_{12} & a\_{13} & a\_{14} \\\\
    a\_{21} & a\_{22} & a\_{23} & a\_{24} \\\\
    \end{pmatrix}\\

    \rightarrow
    {\bf{A}^t} = 
    \begin{pmatrix} 
    a\_{11} & a\_{21}  \\\\
    a\_{12} & a\_{22}  \\\\
    a\_{13} & a\_{23}  \\\\
    a\_{14} & a\_{24}  \\\\
    \end{pmatrix} 


행렬끼리의 곱은 다른 연산에 비해 특이하게 정의된다.


.. proof:definition:: 행렬곱

    행렬 :math:`{\bf A} \in M\_{m \times n} (\mathbb{F})` , :math:`{\bf B} \in M\_{n \times p} (\mathbb{F})` 에 대해, 
    이 두 행렬의 행렬곱 :math:`{\bf C}` 은 다음과 같다.

    .. math::

          {\bf C} := {\bf A} {\bf B} 
          c\_{ij} = \sum_{k=1}^n a\_{ik}b\_{kj}
          i = 1 ,2, \dots m
          j = 1 ,2, \dots p
          k = 1 ,2, \dots n

정의에 의해 :math:`{\bf C} \in M\_{np}(\mathbb{F})` 임을 알 수 있다. 
이 곱은 우리가 아는 일반적인 곱셈과 다른 점이 많다. 
먼저, 정의에 의해 교환 법칙이 성립하지 않는다. 일반적으로 :math:`\mathbf{AB - BA} \neq 0` 이고, 
특수한 경우 :math:`\mathbf{AB - BA} = 0` 를 만족하는 Commuting matrix라 부른다. 

벡터와 행렬의 곱은 벡터 :math:`{\bf x } \in M\_{m \times n}` 를 :math:`m` 이나 :math:`n` 이 1인 행렬임을 알면 행렬곱이라는 것을 알 수 있다. 
이 때. :math:`\bf A x` 에서 :math:`\bf A` 의 행의 갯수가 :math:`\bf x` 의 길이와 같아야한다.

이러한 정의는 행렬을 통해 **선형 변환** (Linear transformation)을 나타내기 위함으로 이러한 행렬 곱을 통해 여러 실제 선형 변환을 실수 연산으로 계산할 수 있다. 
실제 선형 변환과의 관련성은 이후의 단원에서 선형 변환을 배우고 알아보도록 하고, 여기서는 이러한 행렬 곱의 성질에 대해 알아보자

* 두 행렬 :math:`{\bf A} \in M_{m \times n} (\mathbb{F}), {\bf B} \in M_{k \times l} (\mathbb{F})` 에 대해, 
  행렬곱 :math:`{\bf A} {\bf B} ` 가 정의된다는 뜻은 :math:`n = k` 를 의미한다.
* 두 행렬 :math:`{\bf A} \in M_{m \times n} (\mathbb{F}), {\bf B} \in M_{k \times l} (\mathbb{F})` 에 대해, 
  행렬곱 :math:`{\bf C} = {\bf A} {\bf B}` 는 :math:`M_{m  \times l}` 에 속한다.
* 벡터 :math:`\bf x` 와 행렬 :math:`{\bf A} \in M_{m \times n}` 사이의 곱은 열 벡터:math:`\bf x` 에 대해, 
  이를 :math:`M_{n \times 1} (\mathbb{F})` 크기의 행렬로 보았을 때, 행렬의 곱 :math:`\bf A x` 과 같다. 행 벡터:math:`\bf y` 의 경우 전치 연산을 통해 가능하다. 
  :math:`\bf A y^T` 
* 행렬곱은 일반적으로 교환 불가능하다. :math:`\bf AB - BA  \neq 0`, 만일 두 행렬 :math:`\bf A, B` 가 :math:`\bf AB - BA  = 0` 를 만족한다면, 
  :math:`\bf A, B` 가 교환가능하다라 한다. 영어로는 commuting matrix라고 한다.
* :math:`\bf (AB)C = A(BC)`
* :math:`\bf A(B+C) = AB+ AC` , :math:`\bf (B+C)D = BD + CD`
* :math:`c {\bf (AB)} = (c {\bf A}) {\bf B}`, :math:`{\bf (AB)}c = {\bf A} ({\bf B}c)`
* :math:`\bf (AB)^T =B^T A^T`

일반적으로 행렬은 실수 체 :math:`\mathbb{R}` 위에서 정의된 경우를 다루는데, 
복소수 체 :math:`\mathbb{C}`에서 정의될 경우, 켤레 복소수 꼴을 정의할 수 있다.
어느 임의의 행렬 :math:`\bf A \in M_{m \times n}(\mathbb {C})` 에 대해, 
.. math::
    
    \bf {A}^{\dagger}\_{ij} = \overline{A}\_{ij}

를 의미한다. ( :math:`A^{\*}` 표기도 쓴다.) 

정사각 행렬
====================

행렬 :math:`M_{m\times n}(\mathbb{F})` 에 대해, :math:`m=n` 인 경우, 이를 정사각 행렬이라고 부른다.

.. proof:definition::정사각 행렬 Square matrix

    행렬 :math:`A \in M_{m \times n}(\mathbb{F})` 에서 
    :math:`m = n` 이라면, 이때의 행렬 :math:`A` 를 정사각 행렬이라 부른다. 
    정사각 행렬 공간은 다음과 같이 표기한다. 

    .. math::

        M_n (\mathbb{F})



정사각 행렬에서,  행렬의 대각 성분 중 가장 큰 성분을 주 대각 성분이라 한다.


.. proof:definition:: 주 대각 Diagonal
            
    정사각 행렬 :math:`{\bf{A}} \in M_{n}(\mathbb{F})` 에서 

    .. math::

        A_{ii} \in \\{A_{11}, A_{22} ,  \dots, A_{nn} \\}
        i = 1, 2, \dots n
    를 :math:`{\bf{A}}` 의 주 대각 성분이라고 하며, :math:`\text{diag}({\bf{A}})` 로 표기한다.

.. proof:definition:: 대각합 Trace

    정사각 행렬 :math:`{\bf{A}} \in M_{n}(\mathbb{F})` 에서 

    .. math::

        \sum_{i=1}^n A_{ii} \in \text{diag}({\bf{A}})
        i = 1, 2, \dots n

    를 :math:`{\bf{A}}` 의 **대각합** (Trace)라고 하며, :math:`\text{tr}({\bf{A}})` 로 표기한다.


이 때, 대각합은 다음의 성질을 가진다.

* :math:`\text{tr}(AB) =\text{tr}(BA)`
* :math:`\text{tr}(A+B) =\text{tr}(A) + \text{tr}(B)`
* :math:`\text{tr}(cA) = c \cdot \text{tr}(A)`

이를 이용하면 한가지 재미있는 사실을 보일 수 있다. 우리가 행렬 곱이 교환 불가능함을 보일 때, 다음과 같은 식을 사용했다.
$$AB - BA$$
일반적으로 해당 식은 영행렬이 아니다. 이때, :math:`C = AB - BA` 인 행렬 :math:`C` 에 대해, :math:`\text{tr}(C)`는 항상 :math:`0` 이 된다. 
반대로, :math:`\text{tr}(C) = 0` 인 행렬은 항상 :math:`AB-BA` 꼴로 분해할 수 있다. (증명은 나중에 하도록하자)

정사각 행렬의 경우 연산의 항등원이 존재하는 데, 이를 항등 행렬(identity matrix)라고 하며, 
:math:`\bf I` 로 표기한다. :math:`n` 차원의 정사각 행렬 공간의 항등 행렬은 :math:`{\bf I}\_n \in M\_{n}` 로도 표기한다.

.. math::
    
    {\bf I}\_n =
    \begin{pmatrix}
    1&0 & 0&&0 \\\\
    0& 1& 0& \ldots &0 \\\\
    0& 0& 1& &0 \\\\
    &\vdots  & & \ddots &\vdots \\\\
     0&0&0& \ldots &1
    \end{pmatrix}


.. proof:definition:: 항등 행렬 Identity Matrix

    정사각 행렬 :math:`{\bf I} \in M_{n} (\mathbb{F})` 에 대해, 
    다음과 같은 행렬 :math:`{\bf I}` 를 **항등 행렬** (Identity Matrix)이라 하고, :math:`{\bf I}_n` 이라 표기한다.

    .. math::

        {\bf I}_{ij} = \delta_{ij}


항등 행렬은 단위 행렬(Unit matrix)라고도 한다. 이 항등 행렬은 행렬곱에 대해 교환 가능하다. 
즉,어떤 임의의 행렬 :math:`{\bf A} \in M\_n (\mathbb{F})` 에 대해 다음이 성립한다.

.. math:: 
    
    {\bf A I\_n - I\_n A }=0

스칼라 행렬은 항등 행렬에 스칼라를 곱한 형태 :math:`c {\bf I}\_n` 의 행렬로 행렬 합과 곱에서 스칼라처럼 사용 가능하다.

정사각 행렬끼리의 곱은 곱하기 전과 동일한 차원으로 닫혀있기 때문에, 동일한 행렬의 연속적인 곱을 수행 할 수 있다. 
이때, 우리가 체에서 차수에대해 한 것처럼 이러한 곱에 대해 비슷한 행렬을 정의할 수 있다. 
이를 멱영 행렬(nilpotent matrix)이라 한다.

.. proof:definition:: 멱영 행렬 Nilpotent Matrix

    정사각 행렬 :math:`{\bf A}\in M\_{n}(\mathbb{F})` 에 대해,

    .. math::
        
        \exists r \geq 1  \text{ s.t } {\bf A}^r =0

    인 행렬 :math:`{\bf A}` 을 **멱영 행렬** (Nilpotent Matrix)이라 한다.
    


앞서 행렬을 정의할 때, 행렬의 전치를 보았다. 어느 :math:`M_{m \times n}` 행렬의 전치는 :math:`M_{n \times m}` 행렬로 표현된다. 
:math:`m = n` 인 정사각행렬에서 이러한 전치 연산은 같은 공간안으로 되돌아오게 된다. 
따라서 행렬의 전치와 행렬을 비교할 수 있는데, 만약 같은 경우 이를 우린  **대칭 행렬(symmetric matrix)** 라 부른다.

.. proof:definition:: 대칭 행렬 Symmetirc Matrix

    정사각 행렬 :math:`{\bf A}\in M\_{n}(\mathbb{F})`와 :math:`i,j = 1, 2, \dots n`에 대해,

    .. math::
        
        A_{ij} = A_{ji}
    
    인 행렬 :math:`{\bf A}`을 **대칭 행렬** (Symmetric Matrix)이라 한다.

.. rubric 각주

.. [#오용] 이러한 재정의가 이루어지지 않은 경우의 대표적인 예시로 극한이 있다. 
           엡실론-델타 논법이 나오기 전 극한의 활용은 상당히 무분별하게 적용되었다.