********************
선형 변환과 행렬
********************




선형 변환(Linear Transform)
=====================================

앞선 단원들에서 우리는 벡터 공간이라는 대수 구조와 그 성질에 대해 배웠다. 
주어진 체와 집합 그리고 그 위에서 정의 된 연산은 **벡터 공간** 이라는 특정한 구조를 가진 공간을 이루게 된다. 
또한, 이러한 벡터 공간에서 벡터 공간에 속한  특정한 원소들의 **선형 결합** 으로 벡터 공간 전체의 원소들을 나타낼 수 있다는 것을 알 수 있었고, 
이를 벡터 공간의 생성 집합, 이러한 생성 집합 중 가장 작은 집합을 **기저** 라고 하였다. 
그리고 기저의 갯수를 우리는 벡터 공간의 **차원** 이라 하였다.

어떤 집합과 체, 연산을 가지고 오더라도 벡터 공간 공리계를 만족하는 이상, 
이는 벡터 공간이 된다. 공간을 분류하는 것은 어떤 공간이 어떤 공간과 **같은** 구조를 가지는 지, 
**다른** 구조를 가지는 지 분류함을 의미한다. 이를 위한 표식으로 우리는 모든 공간이 가지는 성질이며, 
구조에 따라 다른 값을 가지는 표식을 이용할 것이다. 바로 공간의 **차원** 이다. 
모든 벡터 공간은 기저를 가지고 이를 이용해 차원을 구할 수 있다. 
그렇다면 차원을 이용해 실질적으로 공간을 어떻게 분류할 수 있을까? 

먼저, 분류를 하기에 앞서서 우리가 분류하고자 하는 모든 공간은 동일한 체 위에서 정의되었다는 전제를 깔아두자. 
비교하고자 하는 두 공간의 차원이 다르다(=기저의 갯수가 다르다.)면 이것만으로 충분하다. 
둘의 구조가 다름을 알 수 있다. 하지만, 두 공간의 차원이 같은 상황에서는 이를 어떻게 분류할 수 있을까? 
이를 위해서는 

**차원이 같은 벡터 공간은 같은 구조를 가지는가**


를 답할 수 있어야한다. 
이러한 질문에 답을 하기 위해서 이 단원에서 벡터 공간의 **구조를 보존** 하는 특정한 변환인 **선형 변환** 을 소개할 것이다. 

결론부터 말하자면 동일 체 위에 정의 된 차원의 크기가 같은 벡터 공간은 같은 구조를 가진다. 
이를 이용하면, 특정한 벡터 공간의 연산을 다른 벡터 공간의 연산으로 표현할 수 있다. 
이 선언은 아주 중요하다. 왜냐하면, 우린 실제로 원소들을 계산해 실질적인 값으로 만들 수 있는 벡터 공간을 가지고 있기 때문이다.
바로 :math:`n` -차원 유클리드 공간 :math:`\mathbb{R}^n` 이다. 

이에 더해, 실수 체 위에서 정의된 유한한 차원의 경우, 
단순히 원소들을 실수 순서쌍으로 표현할 수 있을 뿐만 아니라, 
연산까지도 실수들로 이루어진 특정 표현으로 표현해 낼 수 있다. 
바로 **행렬** 이다. 모든 유한 차원의 선형 변환은 행렬로 표현할 수 있고, 
모든 행렬은 그 자체로 특정한 선형 변환을 나타낸다.

이 단원에서 우리는 먼저, 행렬의 기초와 구조를 보존하는 선형 변환을 배우고 이러한 선형 변환과 행렬이 동치관계라는 사실을 증명해, 
앞으로 우리가 다룰 많은 추상적 대상들을 실수의 연산으로 표현할 수 있음을 보일 것이다.

선형 변환(transform) 과 자주 혼용 되는 표현으로 함수(function) 대응 관계(map) 연산(operator) 등이 있다. 
이 책 전반부에서는 변환(transform)이라는 표현을 쓸 것이지만, 
양자 역학등의 물리에서는 연산자(operator)라는 표현을 자주 쓸 것이다.

동치 관계
----------------------

변환을 소개하기에 앞서 **같다** 라는 것이 수학적으로 어떤 의미인지를 정의하고 가도록 하자. 
선형 변환을 공부하는 목적은 공간의 구조가 같음을 판별하기 위함인 만큼, 
같다라는 의미가 무엇인지 먼저 정의해야 한다. 
이는 어느 특정한 **관계** 의 성질을 나타낸다고 볼 수 있다. 
수학적으로 같다는 **동치 관계** (equivalence relationship)로 정의할 수 있다.

.. proof:definition:: 동치 관계 Equivalence relationship

    공집합이 아닌, 어느 집합 :math:`S` 와 그 원소 :math:`x,y,z \in S` 에 대해 이항 관계 :math:`\sim` 가 다음을 만족한다.

    .. math::

        x \sim x, \forall x \in S
        x \sim y \Rightarrow y \sim x, \forall x ,y \in S
        x \sim y, y \sim x \Rightarrow x \sim z, \forall x,y,z \in S

    이를 만족하는 :math:`\sim` 를 :math:`S` 위에서 정의된 **동치 관계** 라 부른다. 
    집합을 표기해 :math:`\sim_S` 로 표기하기도 한다.



동치 관계를 구성하는 3개의 공리는 각각 순서대로, 
**반사성** (Reflexive), 
**대칭성** (Symmetric), 
그리고 **추이성** (Transitive)으로 부른다. 
동치 관계를 가지고 동치 관계인 원소들로 이루어진 집합을 정의 할 수 있다. 


.. proof:definition:: 동치류 equivalent class


    공집합이 아닌 집합 :math:`S` 와 그 위에서 정의된 동치 관계 :math:`\sim` 에 대해, 
    어느 원소 :math:`x \in S` 의 동치류는 다음을 만족하는 :math:`S` 의 부분 집합이다. 

    .. math:: 

        [x] := \{y | x \sim y, \forall y \in S \}
            

이러한 동치류는 결국 어느 한 원소와 동치 관계인 원소 집합을 의미하므로 이러한 원소를 표기에 반영해 :math:`[x]` 과 같이 표기한다. 그런데 동치 관계의 특성상 이러한 대표원은 :math:`x`  하나만 가능한 것이 아니라, 동치류 안의 모든 원소들이 대표원으로써 사용 될 수 있다. 다시 말해, :math:`a \in [x]` 라면, :math:`[a] = [x]` 인 것이다. 즉, 정의된 동치 관계로 구분되는 경우에 이들은 사실상 같은 원소들인 것이다.

선형 변환
--------------------

.. proof:definition:: 선형 변환 Linear transformation

    체 :math:`\mathcal{F}`  위에 정의된 벡터 공간 :math:`V,W` 에 대해, 
    함수 :math:`T: V \rightarrow W` 가 다음을 만족한다.

    .. math::

        {\bf x,y }\in V, c \in \mathcal{F}
        T({\bf x+y}) = T({\bf x})+T({\bf y })
        T(c {\bf x} ) = c T({\bf x})

    이 때, 함수 :math:`T` 를 :math:`V \rightarrow W` 의 **선형 변환** 이라 한다.


이러한 변환을 통해 보존 되는 벡터 공간의 구조는 일차 종속, 독립, 기저의 수 등이 있다. 
이러한 보존 되는 공간의 성질을 우리는 **불변** (Invariant)하다고 한다.

위를 만족하는 선형 변환은 다음을 만족한다.

.. proof:Theorem:: Properties of Linear transform

    * :math:`T({0_V}) = 0_W` 
    * :math:`T(c {\bf x} + {\bf y}) = cT( {\bf x}) +T({\bf y})` 
    * :math:`T(- {\bf y}) =-T({\bf y})``

.. proof:Corollary:: 1

    .. math::

        T(\sum_{i=1}^n a_i {\bf x}_i) =\sum_{i=1}^n a_iT({\bf x}_i)


선형 변환이 공간의 구조를 보존한다고 하였는 데, 기저 또한 보존한다. 

즉, 기저의 선형 변환은 그 공간의 또다른 기저를 형성한다. 
이러한 기저가 계산하기 쉬운 기저가 아닐 수는 있으나, 
별도의 기저를 찾을 필요가 없다는 점에서 매우 편리하다. 
이제 이를 보이기 위해서는 몇가지 개념이 추가로 필요하다.

고등학교 때로, 돌아가 함수의 여러 성질들을 생각해 보도록 하자. 
함수는 어느 함수를 정의하고자 할 때, 
우리는 먼저 함수의 정의역, 공역을 두고, 대응 관계를 정의해 공역 내의 치역을 정의한다. 


변환에서도 



Kernel = Null space
Image


이들은 단순히 공간의 원소가 되는 것이 아니라 각각 벡터 공간 :math:`V, W` 의 부분 공간을 형성한다.

이들 자체로 벡터 공간의 공리계를 만족하므로 다음과 같이 차원을 정의 할수 있다. 
Kernel의 차원을 nulity(퇴화 차수), Image의 차원을 rank(계수)라 한다.

함수의 여러성질들을 Kernel과 Image의 용어를 이용해 다음과 같이 새로 정의할 수 있다.

injective
surjective
bijective


역변환의 존재 유무도 매우 중요한 성질중 하나다.

이러한 대응, 함수의 개념을 좀 더 추상화 시켜서 '사상'(morphism)이라고 한다. 
우리가 함수의 성질을 앞에 붙여 "일대일 함수", "일대일 대응 함수"라 하듯이, 
이러한 사상도 앞에 성질을 나타내는 접두사를 붙여 부르기도 한다.


========================  =================
:math:`T` 의 성질          morphism
========================  =================
injective                  mono-morphism
surjective                 epi-morphism
bijective                  iso-morphism
:math:`V =W`               endo-morphism
bijective & :math:`V =W`   auto-morphism
========================  =================

이러한 사상이 존재하는 두 공간에 대해, 두 공간이 서로 **동형 (Isomorphic)** 이다라 한다.

.. proof:definition:: 벡터 공간의 동형 Isomorphic Vector space


    체 :math:`\mathbb{F}`  위에 정의된 두 벡터공간 :math:`V, W` 에 대해, 전단사(bijection) 함수 :math:`T:V \rightarrow W` 가 존재할 때,
    함수 :math:`T` 를 **동형 사상** (Isomorphism)이라 하고
    :math:`V` 가 :math:`W` 와, :math:`W` 와 :math:`V` 가 **동형** (Isomorphic)이라 한다.
            

동형 관계에 있는 두 공간 :math:`V,W` 를 다음과 같이 표기한다.

.. math:: 

    V \approx W

동형 관계는 동치 관계이기도 하다.

이러한 동형 관계에 있는 두 벡터 공간은 **성질** 이 같다. 
이 성질이라는 말은 상당히 포괄적인 언급인데, 공간을 분류하고 
그 속에서 벌일 수 있는 여러 연산들이 그대로 동형 관계에 있는 연산으로 보존시킬 수 있다는 뜻이다. 

구체적으로  :math:`V \approx W` 와 그 동형 사상 :math:`T` , 부분 공간 :math:`S_1 , S_2 \subset V` 에 대해

* :math:`T(S_1 \cap S_2) =T(S_1) \cap T(S_2)``
* :math:`T(S_1 \cup S_2) =T(S_1) \cup T(S_2)`  
* :math:`\text{span}(S_1) = V \leftrightarrow \text{span}(T(S_1)) = W``
* :math:`\text{dim}(S_1) =\text{dim}(T(S_1))``
 
를 만족한다.

동형 공간들이 가지는 의미는 다음과 같다. 
우리가 어느 벡터 공간을 연구하고자 할 때, 잘 연구된 벡터 공간이 존재하고, 
이와 동형이라면, 연구하고자 하는 대상의 연산들을 우리가 아는 공간의 연산과 bijection들로 표현할 수 있다는 것이다. 
이러한 동형을 정의할 때 쓴, **구조를 보존** 하는 변환의 경우 단순히 벡터 공간 위에서 뿐만 아니라 
군 그리고 위상 공간에 이르기까지 폭넓게 그리고 중요하게 다루어지는 대상이다. 
각각의 공간들의 성질에 따라 여러 가지 변환들이 정의 된다.
 
그리고 우리에겐 잘 정의되고 연구된 벡터 공간 :math:`\mathcal{R}^n` 이 존재한다. 
만약, 모든 :math:`n` -차원 벡터 공간이  :math:`\mathbb{R}^n` 과 동형이라면 
우린  :math:`\mathcal{R}^n` 로 존재하는 모든 :math:`n` -차원 벡터 공간을 표현할 수 있다. 

이는 정말 강력한 선언인데, 정말 유용하게도 참이다.
 
.. proof:Theorem:: :math:`n` -차원의 동형 공간

    체 :math:`\mathcal{F}`  위에서 정의된, :math:`\text{dim}(V) = n \in \mathcal{N}` 인 벡터 공간 :math:`V` 에 대해, 
    다음이 성립한다.

    .. math:: 
        \mathcal{F}^n \approx V


불변 부분 공간(invariant subspace)
-----------------------------------------

순환 부분 공간(Cyclic subspace)
-----------------------------------------


행렬
===============

